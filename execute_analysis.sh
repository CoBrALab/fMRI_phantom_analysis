#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([input_epi],[The phantom fMRI timeseries, as a 4D nifti.],[])
# ARG_POSITIONAL_SINGLE([output_path],[Path for where the output pdf report will be saved.],[])
# ARG_OPTIONAL_SINGLE([repetition_time],[],[The acquisition TR, in seconds.],[1.0])
# ARG_OPTIONAL_SINGLE([input_roi],[],[A manually drawn single-slice ROI, as a 3D nifti. A 10x10 ROI in the center slice is used by default.],[None])
# ARG_OPTIONAL_SINGLE([desired_slice],[],[The slice to be plotted in the report, as an integer. Center slice is computed and used by default.],[None])
# ARG_OPTIONAL_SINGLE([weisskoff_max_roi_width],[],[The width of the largest ROI that is analyzed during Weisskoff analysis, in pixels. It should be as large as possible without extending outside the phantom],[20])
# ARG_HELP([This script performs a temporal stability analysis of an fMRI timeseries acquired using a phantom. The outputs aid in the diagnosis of issues with scanner stability.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_repetition_time="1.0"
_arg_input_roi="None"
_arg_desired_slice="None"
_arg_weisskoff_max_roi_width="20"


print_help()
{
	printf '%s\n' "This script performs a temporal stability analysis of an fMRI timeseries acquired using a phantom. The outputs aid in the diagnosis of issues with scanner stability."
	printf 'Usage: %s [--repetition_time <arg>] [--input_roi <arg>] [--desired_slice <arg>] [--weisskoff_max_roi_width <arg>] [-h|--help] <input_epi> <output_path>\n' "$0"
	printf '\t%s\n' "<input_epi>: The phantom fMRI timeseries, as a 4D nifti."
	printf '\t%s\n' "<output_path>: Path for where the output pdf report will be saved."
	printf '\t%s\n' "--repetition_time: The acquisition TR, in seconds. (default: '1.0')"
	printf '\t%s\n' "--input_roi: A manually drawn single-slice ROI, as a 3D nifti. A 10x10 ROI in the center slice is used by default. (default: 'None')"
	printf '\t%s\n' "--desired_slice: The slice to be plotted in the report, as an integer. Center slice is computed and used by default. (default: 'None')"
	printf '\t%s\n' "--weisskoff_max_roi_width: The width of the largest ROI that is analyzed during Weisskoff analysis, in pixels. It should be as large as possible without extending outside the phantom (default: '20')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--repetition_time)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repetition_time="$2"
				shift
				;;
			--repetition_time=*)
				_arg_repetition_time="${_key##--repetition_time=}"
				;;
			--input_roi)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_input_roi="$2"
				shift
				;;
			--input_roi=*)
				_arg_input_roi="${_key##--input_roi=}"
				;;
			--desired_slice)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_desired_slice="$2"
				shift
				;;
			--desired_slice=*)
				_arg_desired_slice="${_key##--desired_slice=}"
				;;
			--weisskoff_max_roi_width)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_weisskoff_max_roi_width="$2"
				shift
				;;
			--weisskoff_max_roi_width=*)
				_arg_weisskoff_max_roi_width="${_key##--weisskoff_max_roi_width=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'input_epi' and 'output_path'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_input_epi _arg_output_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

################################################################# ACTUAL SCRIPT #################################################
source activate phantom_analysis
set -euo pipefail
IFS=$'\n\t'

#get the path to the folder where the current script is located
wdir="$PWD"; [ "$PWD" = "/" ] && wdir=""
case "$0" in
  /*) scriptdir="${0}";;
  *) scriptdir="$wdir/${0#./}";;
esac
scriptdir="${scriptdir%/*}"

python3.8 $scriptdir/phantom_analysis_functions.py $_arg_input_epi $_arg_output_path $_arg_repetition_time $_arg_input_roi $_arg_desired_slice $_arg_weisskoff_max_roi_width

# ] <-- needed because of Argbash
